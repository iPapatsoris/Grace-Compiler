Package compiler;

Helpers
    sp = ' ';
    lf = 0x000a;
    cr = 0x000d;
    ff = 0x000c;
    ht = 0x0009;
    line_terminator = lf | cr | cr lf;
    whitespace = (sp | ht | ff | line_terminator)*;

    all = [0..0xffff];
    letter = [['a'..'z'] + ['A'..'Z']];
    digit = ['0'..'9'];
    hexadecimal_digit = digit | ['a'..'f'] | ['A'..'F'];
    hexadecimal_literal = ('x' | 'X') hexadecimal_digit hexadecimal_digit;
    escape_sequence = '\n' | '\t' | '\r' | '\0' | '\\' | '\' ''' | '\"' | hexadecimal_literal;
    common_char = [all - [[''' + '"'] + '\']];
    char_part = common_char | escape_sequence;
    not_dollar = [all - '$'];
    not_dollar_line_terminator = [all - ['$' + [lf + cr]]];
    not_line_terminator = [all - [lf + cr]];

Tokens
    and = 'and';
    char = 'char';
    div = 'div';
    do = 'do';
    else = 'else';
    fun = 'fun';
    if = 'if';
    int = 'int';
    mod = 'mod';
    not = 'not';
    nothing = 'nothing';
    or = 'or';
    ref = 'ref';
    return = 'return';
    then = 'then';
    var = 'var';
    while = 'while';

    plus = '+';
    minus = '-';
    times = '*';
    hash = '#';
    equal = '=';
    less_than = '<';
    greater_than = '>';
    less_than_equal = '<=';
    greater_than_equal = '>=';

    lparen = '(';
    rparen = ')';
    lsquare_bracket = '[';
    rsquare_bracket = ']';
    lbracket = '{';
    rbracket = '}';
    comma = ',';
    semicolon = ';';
    colon = ':';
    left_arrow = '<-';

    identifier = letter (letter | digit | '_')*;
    int_constant = digit+;
    char_constant = ''' char_part ''';
    string = '"' ([common_char - [lf + cr]] | escape_sequence)+ '"';

    line_comment = '$' (line_terminator | (not_dollar_line_terminator not_line_terminator* line_terminator));
    block_comment = '$$' not_dollar* '$' (not_dollar not_dollar* '$')* '$';
    whitespace = whitespace;

Ignored Tokens
    whitespace, line_comment, block_comment;

Productions
    //program = expr*;
    expr = {add} expr plus term
         | {sub} expr minus term
         | {term} term
         ;

    term = {mult} term times factor
         | {div} term div factor
         | {mod} term mod factor
         | {factor} factor
         ;

    factor = {positive} plus const
           | {negative} minus const
           | {const} const
           ;

    const = {int} int_constant
          | {char} char_constant
          | {paren} lparen expr rparen
          ;
