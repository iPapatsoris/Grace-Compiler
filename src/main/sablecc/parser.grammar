Package compiler;

Helpers
    sp = ' ';
    lf = 0x000a;
    cr = 0x000d;
    ff = 0x000c;
    ht = 0x0009;
    line_terminator = lf | cr | cr lf;
    whitespace = (sp | ht | ff | line_terminator)*;

    all = [0..0xffff];
    letter = [['a'..'z'] + ['A'..'Z']];
    digit = ['0'..'9'];
    hexadecimal_digit = digit | ['a'..'f'] | ['A'..'F'];
    hexadecimal_literal = ('x' | 'X') hexadecimal_digit hexadecimal_digit;
    escape_sequence = '\n' | '\t' | '\r' | '\0' | '\\' | '\' ''' | '\"' | hexadecimal_literal;
    common_char = [all - [[''' + '"'] + '\']];
    char_part = common_char | escape_sequence;
    not_dollar = [all - '$'];
    not_dollar_line_terminator = [all - ['$' + [lf + cr]]];
    not_line_terminator = [all - [lf + cr]];

Tokens
    and = 'and';
    char = 'char';
    div = 'div';
    do = 'do';
    else = 'else';
    fun = 'fun';
    if = 'if';
    int = 'int';
    mod = 'mod';
    not = 'not';
    nothing = 'nothing';
    or = 'or';
    ref = 'ref';
    return = 'return';
    then = 'then';
    var = 'var';
    while = 'while';

    plus = '+';
    minus = '-';
    times = '*';
    hash = '#';
    equal = '=';
    less = '<';
    greater = '>';
    less_equal = '<=';
    greater_equal = '>=';

    lparen = '(';
    rparen = ')';
    lsquare_bracket = '[';
    rsquare_bracket = ']';
    lbracket = '{';
    rbracket = '}';
    comma = ',';
    semicolon = ';';
    colon = ':';
    left_arrow = '<-';

    identifier = letter (letter | digit | '_')*;
    int_constant = digit+;
    char_constant = ''' char_part ''';
    string = '"' ([common_char - [lf + cr]] | escape_sequence)+ '"';

    line_comment = '$' (line_terminator | (not_dollar_line_terminator not_line_terminator* line_terminator));
    block_comment = '$$' not_dollar* '$' (not_dollar not_dollar* '$')* '$';
    whitespace = whitespace;

Ignored Tokens
    whitespace, line_comment, block_comment;

Productions
    program {-> program} = statement* {-> New program.program([statement])}; /*func_def;*/
    func_def = header local_def* block;

    another_fpar_def = semicolon fpar_def;
    one_or_more_fpar_def = fpar_def another_fpar_def*;
    header = fun identifier lparen one_or_more_fpar_def? rparen colon return_type;


    fpar_def = ref? identifier another_identifier* colon fpar_type;
    data_type = {int} int
              | {char} char
              ;

    array_size = lsquare_bracket int_constant rsquare_bracket;
    type = data_type array_size*;
    return_type = data_type
             | {nothing} nothing
             ;

    empty_cell = lsquare_bracket rsquare_bracket;
    fpar_type = data_type empty_cell? array_size*;
    local_def = {func_def} func_def
              | {func_decl} func_decl
              | {var_def} var_def
              ;

    another_identifier = comma identifier;
    var_def = var identifier another_identifier* colon type semicolon;
    func_decl = header semicolon;

    /* Statements */
    statement {-> statement*} =
                {open} open_statement {-> [open_statement.statement]}
              | {matched} matched_statement {-> [matched_statement.statement]}
              ;

    matched_statement {-> statement*} =
                        {with_else} if cond then [left]:matched_statement else [right]:matched_statement {-> [New statement.if(cond.cond, [left.statement], [right.statement])]}
                      | {while} while cond do matched_statement {-> [New statement.while(cond.cond, [matched_statement.statement])]}
                      | {other} other_statement {-> [other_statement.statement]}
                      ;

    open_statement {-> statement*} =
                     {without_else} if cond then statement {-> [New statement.if(cond.cond, [statement.statement], [])]}
                   | {with_else} if cond then matched_statement else open_statement {-> [New statement.if(cond.cond, [matched_statement.statement], [open_statement.statement])]}
                   | {while} while cond do open_statement {-> [New statement.while(cond.cond, [open_statement.statement])]}
                   ;

    other_statement {-> statement*} =
                      {null} semicolon {-> [New statement.null()]}
                    | {assignment} l_value left_arrow expr semicolon {-> [New statement.assignment(l_value.l_value, expr.expr)]}
                    | {func_call} func_call semicolon {-> [New statement.func_call(func_call.func_call)]}
                    | {return} return expr? semicolon {-> [New statement.return(expr.expr)]}
                    | {block} block {-> [block.statement]}
                    ;

    block {-> statement*} = lbracket statement* rbracket {-> [statement.statement]};

    /* Function call */
    another_argument {-> expr} = comma expr {-> expr.expr};
    arguments {-> expr+} = expr another_argument* {-> [expr.expr, another_argument.expr]};
    func_call {-> func_call} = identifier lparen arguments? rparen {-> New func_call(identifier, [arguments.expr])};

    /* L-value */
    cell {-> expr} =
         lsquare_bracket expr rsquare_bracket {-> expr.expr};

    l_value {-> l_value} =
            {id} identifier cell* {-> New l_value.identifier(identifier, [cell.expr])}
            | {string} string cell* {-> New l_value.string(string, [cell.expr])}
            ;

    /* Conditions */
    cond {-> cond} =
           {disj} cond or conj {-> New cond.disj(cond.cond, conj.cond)}
         | {other} conj {-> conj.cond}
         ;

    conj {-> cond} =
           conj and neg {-> New cond.conj(conj.cond, neg.cond)}
         | {other} neg {-> neg.cond}
         ;

    neg {-> cond } =
          not neg {-> New cond.neg(neg.cond)}
        | {other} numeric_cond {-> numeric_cond.cond}
        ;

    numeric_cond {-> cond} =
                   {equal} [left]:expr equal [right]:expr {-> New cond.equal(left.expr, right.expr)}
                 | {not_equal} [left]:expr hash [right]:expr {-> New cond.not_equal(left.expr, right.expr)}
                 | {greater} [left]:expr greater [right]:expr {-> New cond.greater(left.expr, right.expr)}
                 | {less} [left]:expr less [right]:expr {-> New cond.less(left.expr, right.expr)}
                 | {greater_equal} [left]:expr greater_equal [right]:expr {-> New cond.greater_equal(left.expr, right.expr)}
                 | {less_equal} [left]:expr less_equal [right]:expr {-> New cond.less_equal(left.expr, right.expr)}
                 | {paren} lparen cond rparen {-> cond.cond}
                 ;

    /* Expressions */
    expr {-> expr} =
           {add} expr plus term {-> New expr.add(expr.expr, term.expr)}
         | {sub} expr minus term {-> New expr.sub(expr.expr, term.expr)}
         | {other} term {-> term.expr}
         ;

    term {-> expr} =
           {mult} term times factor {-> New expr.mult(term.expr, factor.expr)}
         | {div} term div factor {-> New expr.div(term.expr, factor.expr)}
         | {mod} term mod factor {-> New expr.mod(term.expr, factor.expr)}
         | {other} factor {-> factor.expr}
         ;

    factor {-> expr} =
             {positive} plus factor {-> New expr.positive(factor.expr)}
           | {negative} minus factor {-> New expr.negative(factor.expr)}
           | {other} const {->const.expr}
           ;

    const {-> expr} =
            {l_value} l_value {-> New expr.l_value(l_value.l_value)}
          | {func_call} func_call {-> New expr.func_call(func_call.func_call)}
          | {int} int_constant {-> New expr.int_constant(int_constant)}
          | {char} char_constant {-> New expr.char_constant(char_constant)}
          | {paren} lparen expr rparen {-> expr.expr}
          ;

Abstract Syntax Tree
    program = {program} statement*;
    statement = {if} cond [then]:statement* [else]:statement*
              | {while} cond statement*
              | {assignment} l_value expr
              | {func_call} func_call
              | {return} expr?
              | {null}
              ;

    cond = {disj} [left]:cond [right]:cond
         | {conj} [left]:cond [right]:cond
         | {neg} cond
         | {equal} [left]:expr [right]:expr
         | {not_equal} [left]:expr [right]:expr
         | {greater} [left]:expr [right]:expr
         | {less} [left]:expr [right]:expr
         | {greater_equal} [left]:expr [right]:expr
         | {less_equal} [left]:expr [right]:expr
         ;

    l_value = {identifier} identifier expr*
            | {string} string expr*
            ;

    func_call = identifier expr*;

    expr = {l_value} l_value
         | {func_call} func_call
         | {add} [left]:expr [right]:expr
         | {sub} [left]:expr [right]:expr
         | {mult} [left]:expr [right]:expr
         | {div} [left]:expr [right]:expr
         | {mod} [left]:expr [right]:expr
         | {positive} expr
         | {negative} expr
         | {int_constant} int_constant
         | {char_constant} char_constant
         ;
